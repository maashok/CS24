Process Puzzlers
================

1) The program always prints out "zipzapzoom"
This is because the program starts in the main function
and first creates a SIGUSR1 signal, which is handled by handler1.
Handler1 first prints out "zip" and immediately flushes the string
to stdout. Then, in the main function, the process is forked.
The child process creates a SIGUSR1 signal also, but which is
handled by handler2, where "zap" is printed out. Then, the child
process gets killed. At the same time that the child process has
been doing this, the parent process has been running concurrently.
However, the parent process has to wait until the child process
becomes a zombie to reap it, after which it can print "zoom".
Thus, "zip" is printed first, then the process is forked and
the child prints "zap", and the parent waits to reap the child
before printing "zoom".

2) The outputs "2030401", "1234000", "2300140", and "3200410"
could be generated by the program.

We will call the original child process A, the original parent
process B, the child of the original child C, and the
child of the original parent D.

Possible Scenarios for each Possible Output:
2030401: Process B runs and forks the child, but continues running.
It then forks again, but still continues and prints 2. It then
prints 0, after which the running of that process ends. Its child
proceess A becomes a child of init. Then, the process A which
has been spawned gets CPU time, and it forks, after which process A
is interrupted. The newly spawned child process C, gets CPU time,
and it prints 3, after which it prints 0, and then returns
(process C becomes zombie). Then, process A gets CPU
time. It first reaps its zombie child C and then prints 4, and then
zero, after which it ends. Finally, the process D gets CPU time,
and it prints 1, after which it exits.

1234000: Process B forks, as well as process A, after which
they are interrupted and Process D runs and prints 1, after which it exits.
Process B, C, and A each print 2, 3, and 4 respectively after
which each is interrupted and control is given to the next process.
Then in some order, these 3 processes get CPU time again, and they
print the zero, after which they exit.

2300140: Process B continues to run after forking and prints 2, after
which it is interrupted. Then process C (which was forked from process
A at some point) gets CPU time and prints 3. Then, the processes B and
C get CPU time again, after which they each print 0 and exit. Then
process A and D become children of init. Then, process D gets
CPU time and it prints 1 and then exits. Finally, process A gets CPU time,
and it reaps its zombie child process C, after which it pritns 4 and
then 0.

2034012: Thie can not occur, as 3 0's must be pritned in the program
by processes A, B, and C.

3200410: Process B forks and the spawned child process A forks. Its child
process C gets CPU time after which it prints 3. Then it is interrupted
and process B gets CPU time, so that it prints 2 and then 0, and exits.
Thus, its children become children of init. Process
C gets CPU time again and it prints 0 and exits. Then process A gets
CPU time and its child process C is now a zombie and can be reaped,
so it prints 4 after which it is interrupted. Finally, process D
gets CPU time, and it prints 1 and then exits. Then, process A gets
CPU time again, after which it prints zero and then exits.
